<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////////////////////////////////
//////// Create Level //////////
////////////////////////////////
//////*~ Grassy Park ~*/////////
////////////////////////////////
// Resize
room_width = (CELL_WIDTH/16) * 720;
room_height = (CELL_HEIGHT/16) * 720;


// Set grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;


// Create grid
grid = ds_grid_create(width, height);

// Create pathfinding grid // this is for "enemies"
grid_path = mp_grid_create(0, 0, width, height, CELL_WIDTH, CELL_HEIGHT);


// Fill grid with void
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);


////////////Layout Generator/////////////////// 
// Randomize the world
randomize();

// Create controller in center of grid // cx "controller x" cy "controller y"
var cx = width div 2;
var cy = height div 2;

// Create player in the world
instance_create(cx*CELL_WIDTH+CELL_WIDTH/2, cy*CELL_HEIGHT+CELL_HEIGHT/2, obj_player);



                //testing
               /* for (var yy = 0; yy &lt; height; yy++){
                for (var xx = 0; xx &lt; width; xx++){
                if (grid[# xx, yy] == FLOOR){
                if (point_distance(ex, ex, obj_player.x, obj_player.y) &gt; 50){
                instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_ABC);
                instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_A);
                }}}} */
                
       
                         
// Give controller rando direction // cdir "controller direction"
var cdir = irandom(3);


// Odds variable for changing direction
var odds = 1;


// Create the level with "repeat (#)" of steps
repeat (3000){
    // Place floor tile at controller position
    grid[# cx, cy] = FLOOR;
    
    // Randomize the direction of controller
    if (irandom(odds) == odds) {
        cdir = irandom(3);
    }
    // Move the controller // xdir "x direction" ydir "y direction"
    // 90 is the degree for up/down/left/right movement 
    ////////////////////////v this number helps control the shape of the level
    var xdir = lengthdir_x(.15, cdir*90);
    var ydir = lengthdir_y(.15, cdir*90);
    cx += xdir;
    cy += ydir;
    
    //Make sure we don't move outside the grid 
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);
}





// Add walls
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++){
        if(grid[# xx, yy] == FLOOR) {
            // Checking for walls
            if (grid[# xx+1, yy] != FLOOR) grid[# xx+1, yy] = WALL;
            if (grid[# xx-1, yy] != FLOOR) grid[# xx-1, yy] = WALL;
            if (grid[# xx, yy+1] != FLOOR) grid[# xx, yy+1] = WALL;
            if (grid[# xx, yy-1] != FLOOR) grid[# xx, yy-1] = WALL;
        }
    }
}

// Remove single walls
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++){
        if(grid[# xx, yy] == WALL &amp;&amp; grid[# xx+1, yy] &amp;&amp; grid[# xx-1, yy] == FLOOR &amp;&amp; grid[# xx, yy+1] == FLOOR &amp;&amp; grid[# xx, yy-1] == FLOOR) {
            grid[# xx, yy]= FLOOR;
        }
    }
}






//////// Place trees and stuff in VOID spaces /////////////



for (var yy = 0; yy &lt; height; yy++){
for (var xx = 0; xx &lt; width; xx++){
if(grid[# xx, yy] == VOID){

    var grass1 = choose(g1_1,g1_2,g1_3,g1_4,g1_5,g1_6);
    var grass2 = choose(g2_1,g2_2,g2_3,g2_4,g2_5,g2_6);   
    var grass3 = choose(g3_1,g3_2,g3_3); 
    var dirt = choose(g4_1,g4_2,g4_3,g4_4,g4_5,g4_6);  
    var flower = choose(f1_1,f1_2,f1_3); 
    var bush = choose(obj_bush1, obj_bush2)   
    randomize();
/// trees
    if (irandom(20) == 20){
        instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_tree1);
            }
    else if (irandom(70) == 70){
        instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_tree2);
            }
    else if (irandom(70) == 70){
        instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_tree3);
            }
    else if (irandom(90) == 90){
        instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, obj_tree4);
            }            
/// bushes
            else if (irandom(50) == 50){
                instance_create(xx*CELL_WIDTH+CELL_WIDTH/2, yy*CELL_HEIGHT+CELL_HEIGHT/2, bush);
            }   
/////////////grass set 1 odds//
            if(irandom(3) == 3){
                tile_add(grass1, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }          
/////////////grass set 2 odds//
            else if(irandom(10) == 10){
                tile_add(grass2, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }             
/////////////grass set 3 odds//
            else if(irandom(3) == 3){
                tile_add(grass3, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            } 
/////////////dirt patch odds//
            else if(irandom(20) == 20){
                tile_add(dirt, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }
////////////flower patches
            else if(irandom(5) == 5){
                tile_add(flower, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }
//////////// else blank tile
            else{
                tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }         
        }
    }
}






//Draw the level using the grid
for (var yy = 0; yy &lt; height; yy++){
    for (var xx = 0; xx &lt; width; xx++){
        if (grid[# xx, yy] == FLOOR){
////////////// Draw the floor randomly?? // this isn't very optimized but OH WELL // f_odds "floor odds"
            // the lower the irandom(#), the higher the chance //
    var grass1 = choose(g1_1,g1_2,g1_3,g1_4,g1_5,g1_6);
    var grass2 = choose(g2_1,g2_2,g2_3,g2_4,g2_5,g2_6);   
    var grass3 = choose(g3_1,g3_2,g3_3); 
    var dirt = choose(g4_1,g4_2,g4_3,g4_4,g4_5,g4_6);  
    var flower = choose(f1_1,f1_2,f1_3);    
    randomize();  
/////////////grass set 1 odds//
            if(irandom(3) == 3){
                tile_add(grass1, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }          
/////////////grass set 2 odds//
            else if(irandom(10) == 10){
                tile_add(grass2, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }             
/////////////grass set 3 odds//
            else if(irandom(3) == 3){
                tile_add(grass3, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            } 
/////////////dirt patch odds//
            else if(irandom(20) == 20){
                tile_add(dirt, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }
////////////flower patches
            else if(irandom(5) == 5){
                tile_add(flower, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }
//////////// else blank tile
            else{
                tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            }
            
            
            
            
 ////////// Animals /////////////  
                
            // Add some enemies // ex "enemy x" ey "enemy y" // To decrease amount of enemies, increase var odds
            //var odds = 30;
            var ex = xx*CELL_WIDTH+CELL_WIDTH/2;
            var ey = yy*CELL_HEIGHT+CELL_HEIGHT/2;
            
            var dogs1 = choose(obj_pom, obj_dach, obj_jf);
            var misc1 = choose(obj_lab_i, obj_jf_i, obj_cat1, obj_cat2);
            var dis1 = choose(20, 25, 30, 35, 40);
            var dis2 = choose(50, 55, 60, 65, 70);
            var dis3 = choose(80, 85, 90);
            randomize();

            ////Following-type animal////
            if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis2 &amp;&amp; irandom(30) == 30){
                instance_create(ex, ey, dogs1);
            }       
            /////Still Animals///////
            if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis3 &amp;&amp; irandom(100) == 100){
                instance_create(ex, ey, obj_chow);
            }
             if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis2 &amp;&amp; irandom(40) == 40){
                instance_create(ex, ey, misc1);
            }           
             if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis3 &amp;&amp; irandom(35) == 35){
                instance_create(ex, ey, obj_bird1);
            }
             if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis1 &amp;&amp; irandom(20) == 20){
                instance_create(ex, ey, obj_bird2);
            }            
             if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis3 &amp;&amp; irandom(150) == 150){
                instance_create(ex, ey, obj_swan);
            }      
            
            //test animals
                                                 
////////////// FOLIAGE inside the park////
        ////Bushes///
           if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis3 &amp;&amp; irandom(70) == 10){
                instance_create(ex, ey, obj_bush1);
            }
           if(point_distance(ex, ex, obj_player.x, obj_player.y) &gt; dis2 &amp;&amp; irandom(70) == 10){
                instance_create(ex, ey, obj_bush2);
            }            
        } 
        
        else {
            mp_grid_add_cell(grid_path, xx, yy);
        }      
    }
}






///////////////////Auto Tiling////////////////////////////
// Get tile size // tw "tile width" th "tile height"
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;


/// Add the tiles /// AUTO TILING
for (var yy = 0; yy &lt; height*2; yy++){
    for (var xx = 0; xx &lt; width*2; xx++){
        if (grid[# xx div 2, yy div 2] == FLOOR){
            // Get tile xy position // tx "tile x position" ty "tile y position"
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty, -ty);
                } 
                else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } 
                    else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } 
                else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty, -ty);
                } 
                else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } 
                    else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                        tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    } 
                    else {
                        tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    }
                }       
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } 
                else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } 
                else {
                    tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty, -ty-tw);
                } 
                else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty, -ty-tw);
                } 
                else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty, -ty-tw);
                }
            }
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room_goto(rando_room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the grid
ds_grid_destroy(grid);
mp_grid_destroy(grid_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
